import streamlit as st
import pandas as pd
from docxtpl import DocxTemplate
import google.generativeai as genai
import os
import re
import time
import zipfile
from io import BytesIO

# --- CONFIGURACI√ìN DE LA P√ÅGINA DE STREAMLIT ---
st.set_page_config(
    page_title="Ensamblador de Fichas T√©cnicas con IA",
    page_icon="ü§ñ",
    layout="wide"
)

# --- FUNCIONES DE L√ìGICA ---

# Funci√≥n para limpiar HTML (de tu c√≥digo original)
def limpiar_html(texto_html):
    if not isinstance(texto_html, str):
        return texto_html
    cleanr = re.compile('<.*?>')
    texto_limpio = re.sub(cleanr, '', texto_html)
    return texto_limpio

# Funci√≥n para configurar el modelo Gemini
def setup_model(api_key):
    try:
        genai.configure(api_key=api_key)
        generation_config = {
            "temperature": 0.6, "top_p": 1, "top_k": 1, "max_output_tokens": 8192
        }
        safety_settings = [
            {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
            {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        ]
        model = genai.GenerativeModel(
            model_name="gemini-1.5-pro-latest",
            generation_config=generation_config,
            safety_settings=safety_settings
        )
        return model
    except Exception as e:
        st.error(f"Error al configurar la API de Google: {e}")
        return None

# Funciones para construir prompts (adaptadas de tu c√≥digo)
def construir_prompt_analisis(fila):
    fila = fila.fillna('')
    descripcion_item = (
        f"Enunciado: {fila.get('Enunciado', '')}\n"
        f"A. {fila.get('OpcionA', '')}\n" # Aseg√∫rate de que el Excel tenga 'OpcionA', 'OpcionB', etc.
        f"B. {fila.get('OpcionB', '')}\n"
        f"C. {fila.get('OpcionC', '')}\n"
        f"D. {fila.get('OpcionD', '')}\n"
        f"Respuesta correcta: {fila.get('AlternativaClave', '')}"
    )
    return f"""
üéØ ROL DEL SISTEMA
Eres un experto en evaluaci√≥n educativa con un profundo conocimiento de la pedagog√≠a urbana, especializado en ense√±anza de las matematicas y procesos cognitivos en el contexto de Bogot√°. Tu misi√≥n es analizar un √≠tem de evaluaci√≥n para proporcionar un an√°lisis tripartito: un resumen de lo que eval√∫a, la ruta cognitiva detallada para la respuesta correcta, y un an√°lisis de los errores asociados a las opciones incorrectas.

üß† INSUMOS DE ENTRADA
- Texto/Fragmento: {fila.get('ItemContexto', 'No aplica')}
- Descripci√≥n del √çtem: {fila.get('Pregunta', 'No aplica')}
- Imagen asociada al √≠tem {fila.get('Imagen_pregunta', 'No aplica')}
- Componente: {fila.get('ComponenteNombre', 'No aplica')}
- Competencia: {fila.get('CompetenciaNombre', '')}
- Aprendizaje Priorizado: {fila.get('AfirmacionNombre', '')}
- Evidencia de Aprendizaje: {fila.get('EvidenciaNombre', '')}
- Grado Escolar: {fila.get('ItemGradoId', '')}
- Opci√≥n A. {fila.get('OpcionA', '')}\n"
- Opci√≥n B. {fila.get('OpcionB', '')}\n"
- Opci√≥n C. {fila.get('OpcionC', '')}\n"
- Opci√≥n D. {fila.get('OpcionD', '')}\n"
- Respuesta correcta: {fila.get('AlternativaClave', '')}"


üéØ ROL DEL SISTEMA
Eres un experto en evaluaci√≥n educativa con un profundo conocimiento de la pedagog√≠a urbana, especializado en ense√±anza de las matem√°ticas y procesos cognitivos en el contexto educativo de Bogot√°. Tu misi√≥n es analizar un √≠tem de evaluaci√≥n para proporcionar un an√°lisis tripartito: 1. Resumen del objetivo del √≠tem: Explica brevemente qu√© habilidad, conocimiento o competencia se est√° evaluando. 2.  Ruta cognitiva para la respuesta correcta: Describe detalladamente el razonamiento y los pasos que un estudiante deber√≠a seguir para llegar a la respuesta v√°lida. 3. An√°lisis de las respuestas incorrectas: Explica los errores comunes asociados a cada opci√≥n no v√°lida, indicando por qu√© un estudiante podr√≠a elegirla y en qu√© radica la equivocaci√≥n.

üß† INSUMOS DE ENTRADA
- Texto/Fragmento: {fila.get('ItemContexto', 'No aplica')}
- Descripci√≥n del √çtem: {fila.get('Pregunta', 'No aplica')}
- Imagen asociada al √≠tem {fila.get('Imagen_pregunta', 'No aplica')}
- Componente: {fila.get('ComponenteNombre', 'No aplica')}
- Competencia: {fila.get('CompetenciaNombre', '')}
- Aprendizaje Priorizado: {fila.get('AfirmacionNombre', '')}
- Evidencia de Aprendizaje: {fila.get('EvidenciaNombre', '')}
- Grado Escolar: {fila.get('ItemGradoId', '')}
- Opci√≥n A. {fila.get('OpcionA', '')}\n"
- Opci√≥n B. {fila.get('OpcionB', '')}\n"
- Opci√≥n C. {fila.get('OpcionC', '')}\n"
- Opci√≥n D. {fila.get('OpcionD', '')}\n"
- Respuesta correcta: {fila.get('AlternativaClave', '')}"


üìù INSTRUCCIONES PARA EL AN√ÅLISIS DEL √çTEM
Genera el an√°lisis del √≠tem siguiendo estas reglas y en el orden exacto solicitado:

### 1. Qu√© Eval√∫a
Bas√°ndote en la Competencia, el Aprendizaje Priorizado y la Evidencia, redacta una frase concisa y clara (m√°ximo 2 renglones) que identifique con claridad la habilidad espec√≠fica que el √≠tem est√° evaluando. Debes comenzar la frase obligatoriamente con "El √≠tem eval√∫a la capacidad del estudiante para...".

### 2. Ruta Cognitiva Correcta
Describe de forma impersonal el procedimiento o el paso a paso l√≥gico y cognitivo que un estudiante debe seguir para llegar a la respuesta correcta. La explicaci√≥n debe ser clara y basarse en los verbos del `CRITERIO COGNITIVO` que se define m√°s abajo.

### 3. An√°lisis de Opciones No V√°lidas
Para cada una de las TRES opciones incorrectas o no validas, explica el posible razonamiento err√≥neo del estudiante. Describe la confusi√≥n o el error conceptual que lo llevar√≠a a elegir esa opci√≥n y luego clarifica por qu√© es incorrecta.

üìò CRITERIO COGNITIVO PARA MATEM√ÅTICAS
Para orientar el an√°lisis del √≠tem, identifica la competencia principal que est√° en el √≠tem y selecciona los verbos cognitivos m√°s adecuados seg√∫n el tipo de habilidad evaluada. A continuaci√≥n, se presentan tres dominios cognitivos, cada uno con una lista de verbos organizados por niveles de complejidad:

1. Interpretaci√≥n y Comunicaci√≥n (Comprender y representar informaci√≥n)
Verbos de menor complejidad (FORTALECER): identificar, leer (datos, gr√°ficos), reconocer, nombrar, contar, localizar, se√±alar.
Verbos de mayor complejidad (AVANZAR): representar (en gr√°ficos, tablas), describir, comparar, clasificar, organizar, traducir (de lenguaje verbal a matem√°tico).

2. Formulaci√≥n y Soluci√≥n de Problemas (Aplicar procedimientos y estrategias)
Verbos de menor complejidad (FORTALECER): calcular, medir, aplicar (una f√≥rmula), resolver (operaciones directas), completar (secuencias), usar (un algoritmo).
Verbos de mayor complejidad (AVANZAR): formular (un plan o ecuaci√≥n), plantear, modelar, dise√±ar (una estrategia), optimizar, descomponer (un problema).

3. Argumentaci√≥n (Justificar y validar procesos y resultados)
Verbos de menor complejidad (FORTALECER): verificar, explicar (los pasos), mostrar, relacionar, ejemplificar.
Verbos de mayor complejidad (AVANZAR): justificar (un m√©todo), validar (un resultado), probar, generalizar, demostrar, evaluar (la pertinencia de una soluci√≥n).

‚úçÔ∏è FORMATO DE SALIDA DEL AN√ÅLISIS
**REGLA CR√çTICA:** Responde √∫nicamente con el texto solicitado y siguiendo estrictamente la estructura definida a continuaci√≥n. Es crucial que los tres t√≠tulos aparezcan en la respuesta, en el orden correcto. No agregues introducciones, conclusiones ni frases de cierre.

Qu√© Eval√∫a:
[Frase concisa de 1-2 renglones, que comience con: ‚ÄúEl √≠tem eval√∫a la capacidad del estudiante para‚Ä¶‚Äù]]  

Ruta Cognitiva Correcta:
[Escribe un p√°rrafo continuo que describa de forma clara y secuencial el proceso cognitivo que un estudiante debe seguir para responder correctamente. No utilices listas.]

An√°lisis de Opciones No V√°lidas:
- El estudiante podr√≠a escoger la [OpcionX] porque [razonamiento err√≥neo]. Sin embargo, esto es incorrecto porque [raz√≥n].
"""

def construir_prompt_recomendaciones(fila):
    fila = fila.fillna('')
    return f"""
üéØ ROL DEL SISTEMA
Eres un experto en evaluaci√≥n educativa especializado en ense√±anza de las matematicas con un profundo conocimiento de la pedagog√≠a urbana. Tu misi√≥n es generar dos recomendaciones pedag√≥gicas personalizadas a partir de cada √≠tem de evaluaci√≥n formativa: una para Fortalecer y otra para Avanzar en el aprendizaje. Deber√°s identificar de manera end√≥gena los verbos clave de los procesos cognitivos implicados, bas√°ndote en la competencia, el aprendizaje priorizado, la evidencia de aprendizaje, el grado escolar, la edad escolar y aproximada del estudiante (para gado 3 ni√±os de 9 a 11 a√±os, grado 6 de 11 a 13 a√±os, grado noveno de 13 a 15 a√±os) y El nivel educativo general esperado para el ciclo escolar correspondiente. Luego, integrar√°s estos verbos de forma fluida en la redacci√≥n de las recomendaciones. Considerar√°s las caracter√≠sticas cognitivas y pedag√≥gicas del √≠tem. Las recomendaciones deben estar redactadas de forma fluida e integrar los verbos cognitivos de manera contextualizada y coherente, sin mencionarlos expl√≠citamente como parte de una lista. Cada sugerencia debe orientar al docente sobre c√≥mo dise√±ar o ajustar actividades did√°cticas que respondan al nivel de complejidad requerido y promuevan un aprendizaje progresivo. Las resomendaciones deben estar escritas de forma impersonal sin nombrar al docente o al estudiante.

üß† INSUMOS DE ENTRADA
- Texto/Fragmento: {fila.get('ItemContexto', 'No aplica')}
- Descripci√≥n del √çtem: {fila.get('Pregunta', 'No aplica')}
- Imagen asociada al √≠tem {fila.get('Imagen_pregunta', 'No aplica')}
- Componente: {fila.get('ComponenteNombre', 'No aplica')}
- Competencia: {fila.get('CompetenciaNombre', '')}
- Aprendizaje Priorizado: {fila.get('AfirmacionNombre', '')}
- Evidencia de Aprendizaje: {fila.get('EvidenciaNombre', '')}
- Tipolog√≠a Textual (Solo para Lectura Cr√≠tica): {fila.get('Tipologia Textual', 'No aplica')}
- Grado Escolar: {fila.get('ItemGradoId', '')}
- Respuesta correcta: {fila.get('AlternativaClave', 'No aplica')}
- Opci√≥n A. {fila.get('OpcionA', 'No aplica')}
- Opci√≥n B. {fila.get('OpcionB', 'No aplica')}
- Opci√≥n C. {fila.get('OpcionC', 'No aplica')}
- Opci√≥n D. {fila.get('OpcionD', 'No aplica')}

üìù INSTRUCCIONES PARA GENERAR LAS RECOMENDACIONES
Para cada √≠tem, redacta dos recomendaciones pedag√≥gicas claras, contextualizadas y accionables, orientadas a mejorar el aprendizaje matem√°tico desde distintos niveles cognitivos teniendo en cuenta los siguientes criterios:

### Reglas Generales Clave:
1.  **Innovaci√≥n Pedag√≥gica:** Las actividades deben ser **novedosas, poco convencionales y creativas**. Busca inspiraci√≥n en temas de actualidad (tecnolog√≠a, medio ambiente, cultura popular, etc.) para que sean significativas y atractivas.
2.  **Enfoque Matem√°tico:** El n√∫cleo de cada actividad debe ser el concepto matem√°tico. Los elementos contextuales o l√∫dicos deben servir para potenciar el aprendizaje matem√°tico, no para opacarlo. La log√≠stica debe ser ser sencilla y factible.
3.  **Diferenciaci√≥n Clara:** La actividad de "Fortalecer" debe ser fundamentalmente diferente en enfoque y ejecuci√≥n a la de "Avanzar".
4.  **Tono de la redacci√≥n:** Evita mencionar sujetos espec√≠ficos como ‚Äúel docente‚Äù o ‚Äúel estudiante‚Äù. Redacta las actividades de forma impersonal y directa, enfocada en la acci√≥n y el prop√≥sito pedag√≥gico.

### 1. Recomendaci√≥n para FORTALECER
-   **Objetivo:**  Reforzar los procesos cognitivos b√°sico esenciales para la resoluci√≥n del √≠tem. 
-   **Tener en cuenta:**. Se pueden tener en cuenta , pero no limitarse a, las **opciones de respuesta incorrectas**. Tener en cuenta los errores conceptuales o procedimentales identificados en las opciones incorrectas del √≠tem. Considerar adicionalmente el alcance que tiene el aprendizaje priorizado y la evidencia de aprendizaje mas all√° del √≠tem.
-   **Verbos Clave Sugeridos:** Utiliza verbos descritos en CRITERIO COGNITIVO PARA MATEM√ÅTICAS que est√°n mas adelante.
-   **P√°rrafo Inicial:** Describe brevemente la estrategia did√°ctica propuesta y explica c√≥mo aborda el error m√°s frecuente evidenciado en los distractores. Describe la estrategia did√°ctica, explicando c√≥mo la actividad propuesta ataca directamente la ra√≠z del error m√°s com√∫n (identificado en las opciones no v√°lidas).
-   **Actividad Propuesta:** Dise√±a una experiencia concreta, l√∫dica y significativa. Debe estar profundamente contextualizada en una situaci√≥n cotidiana, real o escolar o de inter√©s para los estudiantes.
-   **Preguntas Orientadoras:** Formula tres preguntas que gu√≠en el aprendizaje desde lo m√°s b√°sico (concreto) hacia la comprensi√≥n del concepto.
-   **Edad de los evaluados:**  Asegura que el nivel cognitivo de la actividad corresponda con la edad y grado escolar del estudiante:. (para gado 3 ni√±os de 9 a 11 a√±os, grado 6 de 11 a 13 a√±os, grado noveno de 13 a 15 a√±os)

### 2. Recomendaci√≥n para AVANZAR
-   **Objetivo:** Desarrollar procesos cognitivos m√°s complejos que permitan **ampliar, profundizar o transferir** el aprendizaje evaluado.
-   **Verbos Clave Sugeridos:** Emplea verbos de mayor nivel descritos en CRITERIO COGNITIVO PARA MATEM√ÅTICAS que est√°n mas adelante.
-   **P√°rrafo Inicial:** Describe la estrategia para complejizar el aprendizaje. Redacta la estrategia teniendo en cuenta que se puede dar en tres v√≠as diferentes: a. Progresar a partir del tipo de n√∫mero utilizado en el objeto matem√°tico; por ejemplo, si se trabaja con n√∫meros naturales, avanzar hacia el uso de fracciones o decimales. b. Ampliar el objeto matem√°tico relacionado; por ejemplo, si se interpreta informaci√≥n de una tabla a un diagrama de barras, avanzar hacia la interpretaci√≥n de un diagrama de barras a uno circular, o de una lista a un pictograma y viceversa o c. Promover un avance en las operaciones intelectuales o procesos de pensamiento, pasando de identificar a diferenciar o corregir, siempre manteniendo la competencia. Incluye m√∫ltiples v√≠as en las que se puede profundizar el conocimiento (ej., "se puede transferir a un problema de finanzas personales, a un desaf√≠o de dise√±o o a un an√°lisis de datos simple...").
-   **Actividad Propuesta:** Crea una actividad totalmente diferente a la de fortalecer, orientado con el objetivo de la recomendaci√≥n,con un desaf√≠o intelectual autentico y estimulante.  Integra de manera creativa elementos actuales o relevantes para los estudiantes.
-   **Preguntas Orientadoras:** Formula preguntas que progresen en dificultad, facilitando el paso de representaciones concretas a abstractas y fomentando el pensamiento cr√≠tico y la generalizaci√≥n.
-   **Edad de los evaluados:**  Ajusta el nivel de complejidad de la propuesta a la edad y grado correspondiente:(para gado 3 ni√±os de 9 a 11 a√±os, grado 6 de 11 a 13 a√±os, grado noveno de 13 a 15 a√±os)
-   **Estrategias para crear actividades de avanzar:** a. Progresar a partir del tipo de n√∫mero utilizado en el objeto matem√°tico; por ejemplo, si se trabaja con n√∫meros naturales, avanzar hacia el uso de fracciones o decimales. b. Ampliar el objeto matem√°tico relacionado; por ejemplo, si se interpreta informaci√≥n de una tabla a un diagrama de barras, avanzar hacia la interpretaci√≥n de un diagrama de barras a uno circular, o de una lista a un pictograma y viceversa. c. Promover un avance en las operaciones intelectuales o procesos de pensamiento, pasando de identificar a diferenciar o corregir, siempre manteniendo la competencia.

üìò CRITERIO COGNITIVO PARA MATEM√ÅTICAS
Identifica la competencia principal del √≠tem y selecciona los verbos cognitivos adecuados de las siguientes listas. Para FORTALECER, elige un verbo que refleje un proceso fundamental o de entrada. Para AVANZAR, selecciona un verbo que implique una mayor elaboraci√≥n o transferencia del conocimiento.

1. Interpretaci√≥n y Comunicaci√≥n (Comprender y representar informaci√≥n)
Verbos de menor complejidad (FORTALECER): identificar, leer (datos, gr√°ficos), reconocer, nombrar, contar, localizar, se√±alar.
Verbos de mayor complejidad (AVANZAR): representar (en gr√°ficos, tablas), describir, comparar, clasificar, organizar, traducir (de lenguaje verbal a matem√°tico).

2. Formulaci√≥n y Soluci√≥n de Problemas (Aplicar procedimientos y estrategias)
Verbos de menor complejidad (FORTALECER): calcular, medir, aplicar (una f√≥rmula), resolver (operaciones directas), completar (secuencias), usar (un algoritmo).
Verbos de mayor complejidad (AVANZAR): formular (un plan o ecuaci√≥n), plantear, modelar, dise√±ar (una estrategia), optimizar, descomponer (un problema).

3. Argumentaci√≥n (Justificar y validar procesos y resultados)
Verbos de menor complejidad (FORTALECER): verificar, explicar (los pasos), mostrar, relacionar, ejemplificar.
Verbos de mayor complejidad (AVANZAR): justificar (un m√©todo), validar (un resultado), probar, generalizar, demostrar, evaluar (la pertinencia de una soluci√≥n).

‚úçÔ∏è FORMATO DE SALIDA DE LAS RECOMENDACIONES
**IMPORTANTE: Responde de forma directa, concreta y de forma impersonal. No incluyas frases de cierre o res√∫menes. Cada recomendaci√≥n debe seguir esta estructura exacta:**

RECOMENDACI√ìN PARA [FORTALECER/AVANZAR] EL APRENDIZAJE EVALUADO EN EL √çTEM
Para [fortalecer/avanzar] en la habilidad de [verbo clave] en situaciones relacionadas con [frase del aprendizaje priorizado], se sugiere [descripci√≥n concreta de la sugerencia].
Una actividad que se puede hacer es: [Descripci√≥n detallada de la actividad].
Las preguntas orientadoras para esta actividad, entre otras, pueden ser:
- [Pregunta 1]
- [Pregunta 2]
- [Pregunta 3]
- [Pregunta 4]
- [Pregunta 5]
"""


# --- INTERFAZ PRINCIPAL DE STREAMLIT ---

st.title("ü§ñ Ensamblador de Fichas T√©cnicas con IA")
st.markdown("Una aplicaci√≥n para enriquecer datos pedag√≥gicos y generar fichas personalizadas.")

# Inicializar session_state para guardar los datos entre ejecuciones
if 'df_enriquecido' not in st.session_state:
    st.session_state.df_enriquecido = None
if 'zip_buffer' not in st.session_state:
    st.session_state.zip_buffer = None

# --- PASO 0: Clave API ---
st.sidebar.header("üîë Configuraci√≥n Obligatoria")
api_key = st.sidebar.text_input("Ingresa tu Clave API de Google AI", type="password")

# --- PASO 1: Carga de Archivos ---
st.header("Paso 1: Carga tus Archivos")
col1, col2 = st.columns(2)
with col1:
    archivo_excel = st.file_uploader("Sube tu Excel con los datos base", type=["xlsx"])
with col2:
    archivo_plantilla = st.file_uploader("Sube tu Plantilla de Word", type=["docx"])

# --- PASO 2: Enriquecimiento con IA ---
st.header("Paso 2: Enriquece tus Datos con IA")
if st.button("ü§ñ Iniciar An√°lisis y Generaci√≥n", disabled=(not api_key or not archivo_excel)):
    if not api_key:
        st.error("Por favor, ingresa tu clave API en la barra lateral izquierda.")
    elif not archivo_excel:
        st.warning("Por favor, sube un archivo Excel para continuar.")
    else:
        model = setup_model(api_key)
        if model:
            with st.spinner("Procesando archivo Excel y preparando datos..."):
                df = pd.read_excel(archivo_excel)
                # Limpieza de HTML
                for col in df.columns:
                    if df[col].dtype == 'object':
                        df[col] = df[col].apply(limpiar_html)
                st.success("Datos limpios y listos para el an√°lisis.")

            total_filas = len(df)
            
            # Proceso de An√°lisis
            with st.spinner("Generando An√°lisis de √çtems... Esto puede tardar varios minutos."):
                que_evalua_lista, just_correcta_lista, an_distractores_lista = [], [], []
                progress_bar_analisis = st.progress(0, text="Iniciando An√°lisis...")
                for i, fila in df.iterrows():
                    prompt = construir_prompt_analisis(fila)
                    try:
                        response = model.generate_content(prompt)
                        texto_completo = response.text.strip()
                        # Separaci√≥n robusta
                        header_que_evalua = "Qu√© Eval√∫a:"
                        header_correcta = "Ruta Cognitiva Correcta:"
                        header_distractores = "An√°lisis de Opciones No V√°lidas:"
                        idx_correcta = texto_completo.find(header_correcta)
                        idx_distractores = texto_completo.find(header_distractores)
                        que_evalua = texto_completo[len(header_que_evalua):idx_correcta].strip() if idx_correcta != -1 else texto_completo
                        just_correcta = texto_completo[idx_correcta:idx_distractores].strip() if idx_correcta != -1 and idx_distractores != -1 else (texto_completo[idx_correcta:].strip() if idx_correcta != -1 else "ERROR")
                        an_distractores = texto_completo[idx_distractores:].strip() if idx_distractores != -1 else "ERROR"
                    except Exception as e:
                        st.warning(f"Error en fila {i+1} (An√°lisis): {e}")
                        que_evalua, just_correcta, an_distractores = "ERROR API", "ERROR API", "ERROR API"
                    
                    que_evalua_lista.append(que_evalua)
                    just_correcta_lista.append(just_correcta)
                    an_distractores_lista.append(an_distractores)
                    progress_bar_analisis.progress((i + 1) / total_filas, text=f"Analizando √çtem {i+1}/{total_filas}")
                    time.sleep(1) # Control de velocidad de la API
                
                df["Que_Evalua"] = que_evalua_lista
                df["Justificacion_Correcta"] = just_correcta_lista
                df["Analisis_Distractores"] = an_distractores_lista
                st.success("An√°lisis de √çtems completado.")

            # Proceso de Recomendaciones
            with st.spinner("Generando Recomendaciones Pedag√≥gicas... Esto tambi√©n puede tardar."):
                fortalecer_lista, avanzar_lista = [], []
                progress_bar_recom = st.progress(0, text="Iniciando Recomendaciones...")
                for i, fila in df.iterrows():
                    prompt = construir_prompt_recomendaciones(fila)
                    try:
                        response = model.generate_content(prompt)
                        texto_completo = response.text.strip()
                        # Separaci√≥n robusta
                        titulo_avanzar = "RECOMENDACI√ìN PARA AVANZAR"
                        idx_avanzar = texto_completo.upper().find(titulo_avanzar)
                        if idx_avanzar != -1:
                            fortalecer = texto_completo[:idx_avanzar].strip()
                            avanzar = texto_completo[idx_avanzar:].strip()
                        else:
                            fortalecer, avanzar = texto_completo, "ERROR: No se encontr√≥ 'AVANZAR'"
                    except Exception as e:
                        st.warning(f"Error en fila {i+1} (Recomendaciones): {e}")
                        fortalecer, avanzar = "ERROR API", "ERROR API"
                    
                    fortalecer_lista.append(fortalecer)
                    avanzar_lista.append(avanzar)
                    progress_bar_recom.progress((i + 1) / total_filas, text=f"Generando Recomendaci√≥n {i+1}/{total_filas}")
                    time.sleep(1) # Control de velocidad

                df["Recomendacion_Fortalecer"] = fortalecer_lista
                df["Recomendacion_Avanzar"] = avanzar_lista
                st.success("Recomendaciones generadas con √©xito.")
            
            # Guardar el resultado en el estado de la sesi√≥n
            st.session_state.df_enriquecido = df
            st.balloons()

# --- PASO 3: Vista Previa y Verificaci√≥n ---
if st.session_state.df_enriquecido is not None:
    st.header("Paso 3: Verifica los Datos Enriquecidos")
    st.dataframe(st.session_state.df_enriquecido.head())
    
    # Opci√≥n para descargar el Excel enriquecido
    output_excel = BytesIO()
    with pd.ExcelWriter(output_excel, engine='openpyxl') as writer:
        st.session_state.df_enriquecido.to_excel(writer, index=False, sheet_name='Datos Enriquecidos')
    output_excel.seek(0)
    
    st.download_button(
        label="üì• Descargar Excel Enriquecido",
        data=output_excel,
        file_name="excel_enriquecido_con_ia.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# --- PASO 4: Ensamblaje de Fichas ---
if st.session_state.df_enriquecido is not None:
    st.header("Paso 4: Ensambla las Fichas T√©cnicas")
    if not archivo_plantilla:
        st.warning("Por favor, sube una plantilla de Word para continuar con el ensamblaje.")
    else:
        columna_nombre_archivo = st.text_input(
            "Escribe el nombre de la columna para nombrar los archivos (ej. ItemId)", 
            value="ItemId"
        )
        
        if st.button("üìÑ Ensamblar Fichas T√©cnicas", type="primary"):
            df_final = st.session_state.df_enriquecido
            if columna_nombre_archivo not in df_final.columns:
                st.error(f"La columna '{columna_nombre_archivo}' no existe en el Excel. Por favor, elige una de: {', '.join(df_final.columns)}")
            else:
                with st.spinner("Ensamblando todas las fichas en un archivo .zip..."):
                    plantilla_bytes = BytesIO(archivo_plantilla.getvalue())
                    zip_buffer = BytesIO()
                    
                    with zipfile.ZipFile(zip_buffer, "a", zipfile.ZIP_DEFLATED, False) as zip_file:
                        total_docs = len(df_final)
                        progress_bar_zip = st.progress(0, text="Iniciando ensamblaje...")
                        for i, fila in df_final.iterrows():
                            doc = DocxTemplate(plantilla_bytes)
                            contexto = fila.to_dict()
                            doc.render(contexto)
                            
                            doc_buffer = BytesIO()
                            doc.save(doc_buffer)
                            doc_buffer.seek(0)
                            
                            nombre_base = str(fila[columna_nombre_archivo]).replace('/', '_').replace('\\', '_')
                            nombre_archivo_salida = f"{nombre_base}.docx"
                            
                            zip_file.writestr(nombre_archivo_salida, doc_buffer.getvalue())
                            progress_bar_zip.progress((i + 1) / total_docs, text=f"A√±adiendo ficha {i+1}/{total_docs} al .zip")
                    
                    st.session_state.zip_buffer = zip_buffer
                    st.success("¬°Ensamblaje completado!")

# --- PASO 5: Descarga Final ---
if st.session_state.zip_buffer:
    st.header("Paso 5: Descarga el Resultado Final")
    st.download_button(
        label="üì• Descargar TODAS las fichas (.zip)",
        data=st.session_state.zip_buffer,
        file_name="fichas_tecnicas_generadas.zip",
        mime="application/zip"
    )
